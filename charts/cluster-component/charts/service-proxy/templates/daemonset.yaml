apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    name: service-proxy
  name: service-proxy
  namespace: {{ .Release.Namespace }}
spec:
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      name: service-proxy
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9101"
      labels:
        name: service-proxy
    spec:
      serviceAccountName: service-proxy
      containers:
      - command:
        - /run.sh
        - --plugins=tenx-proxy --watch=watchsrvs --emailReceiver=songrongxiang@tenxcloud.com
          --config=/etc/tenx/domain.json
        image: "{{ .Values.serviceProxyImage.repository }}:{{ .Values.serviceProxyImage.tag }}"
        env:
        - name: HEALTH_PORT
          value: '8081'
        resources:
          limits:
            cpu: "2"
            memory: 2Gi
          requests:
            cpu: "2"
            memory: 1Gi
        imagePullPolicy: IfNotPresent
        name: service-proxy
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-sock
        - mountPath: /etc/tenx/
          name: kube-config
        - mountPath: /etc/sslkeys/certs
          name: kube-cert
        - mountPath: /etc/default/hafolder/haproxy.tpl
          name: service-proxy-template
          subPath: haproxy.tpl
        - mountPath: /var/lib/haproxy
          name: haproxy-sock
      - command:
        - sh
        - -c
        - sleep 10 && haproxy_exporter --haproxy.scrape-uri=unix:/run/haproxy/haproxy.sock
        image: "{{ .Values.exporterImage.repository }}:{{ .Values.exporterImage.tag }}"
        imagePullPolicy: IfNotPresent
        name: exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 0
        resources:
          limits:
            cpu: "500"
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 64Mi
        ports:
        - containerPort: 9101
          hostPort: 9101
          name: scrape
          protocol: TCP
        volumeMounts:
        - mountPath: /run/haproxy
          name: haproxy-sock
      dnsPolicy: ClusterFirst
      hostNetwork: true
      nodeSelector:
        role: proxy
      restartPolicy: Always
      volumes:
      - emptyDir: {}
        name: docker-sock
      - hostPath:
          path: /var/run/docker.sock
        name: config-volume
      - configMap:
          defaultMode: 420
          name: kube-config
        name: kube-config
      - configMap:
          defaultMode: 420
          name: service-proxy-template
        name: service-proxy-template
      - emptyDir: {}
        name: kube-cert
      - emptyDir: {}
        name: haproxy-sock
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: role
                operator: In
                values:
                - proxy
